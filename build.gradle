import org.jetbrains.dokka.gradle.DokkaTask

buildscript {
    ext.kotlin_version = "1.9.24"
    ext.jacocoVersion = '0.8.9'
    repositories {
        google()
        mavenCentral()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        if (System.getenv("SHOULD_PUBLISH") == "true") {
            classpath("io.github.gradle-nexus:publish-plugin:1.1.0")
        }
        classpath 'com.android.tools.build:gradle:8.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jacoco:org.jacoco.core:$jacocoVersion"
    }
}

plugins {
    id "org.sonarqube" version "3.5.0.2730"
    id("org.jetbrains.dokka") version "2.0.0"
}

sonarqube {
    // TODO update this information once ionic Sonarqube is available
    properties {
        property "sonar.projectKey", "OutSystems_IONFilesystemLib-Android"
        property "sonar.organization", "outsystemsrd"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

if (System.getenv("SHOULD_PUBLISH") == "true") {
    apply plugin: "io.github.gradle-nexus.publish-plugin"
    apply from: file("./scripts/publish-root.gradle")
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "jacoco"

android {
    namespace "io.ionic.libs.ionfilesystemlib"
    compileSdk 35

    defaultConfig {
        minSdk 23
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    tasks.register('jacocoTestReport', JacocoReport) {
        dependsOn['testDebugUnitTest']

        reports {
            xml.getRequired().set(true)
            html.getRequired().set(true)
        }

        def fileFilter = ['**/BuildConfig.*', '**/Manifest*.*']
        def debugTree = fileTree(dir: "${layout.buildDirectory}/tmp/kotlin-classes/debugUnitTest", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/kotlin"

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([debugTree]))
        executionData.setFrom(fileTree(dir: "${layout.buildDirectory}", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ]))
    }

    tasks.withType(DokkaTask.class).configureEach {
        outputDirectory.set(file("dokka_docs"))
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    publishing {
        singleVariant("release")
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0'
    implementation 'androidx.activity:activity-ktx:1.9.3'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.13.10'
    testImplementation 'app.cash.turbine:turbine:1.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0'
    testImplementation 'org.robolectric:robolectric:4.14'
}

if (System.getenv("SHOULD_PUBLISH") == "true") {
    apply from: file("./scripts/publish-module.gradle")
}
